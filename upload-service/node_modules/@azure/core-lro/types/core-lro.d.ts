import { AbortSignalLike } from '@azure/abort-controller';

export declare type CancelOnProgress = () => void;

export declare abstract class Poller<TState, TResult> implements PollerLike<TState, TResult> {
    private stopped;
    private resolve?;
    private reject?;
    private pollOncePromise?;
    private cancelPromise?;
    private promise;
    private pollProgressCallbacks;
    protected operation: PollOperation<TState, TResult>;
    constructor(operation: PollOperation<TState, TResult>);
    protected abstract delay(): Promise<void>;
    private startPolling;
    private pollOnce;
    private fireProgress;
    private cancelOnce;
    poll(options?: {
        abortSignal?: AbortSignal;
    }): Promise<void>;
    pollUntilDone(): Promise<TResult>;
    onProgress(callback: (state: TState) => void): CancelOnProgress;
    isDone(): boolean;
    stopPolling(): void;
    isStopped(): boolean;
    cancelOperation(options?: {
        abortSignal?: AbortSignal;
    }): Promise<void>;
    getOperationState(): PollOperationState<TResult>;
    getResult(): TResult | undefined;
    toString(): string;
}

export declare class PollerCancelledError extends Error {
    constructor(message: string);
}

export declare interface PollerLike<TState, TResult> {
    poll(options?: {
        abortSignal?: AbortSignal;
    }): Promise<void>;
    pollUntilDone(): Promise<TResult>;
    onProgress(callback: (state: TState) => void): CancelOnProgress;
    isDone(): boolean;
    stopPolling(): void;
    isStopped(): boolean;
    cancelOperation(options?: {
        abortSignal?: AbortSignal;
    }): Promise<void>;
    getOperationState(): PollOperationState<TResult>;
    getResult(): TResult | undefined;
    toString(): string;
}

export declare class PollerStoppedError extends Error {
    constructor(message: string);
}

export declare interface PollOperation<TState, TResult> {
    state: TState;
    update(options?: {
        abortSignal?: AbortSignalLike;
        fireProgress?: (state: TState) => void;
    }): Promise<PollOperation<TState, TResult>>;
    cancel(options?: {
        abortSignal?: AbortSignal;
    }): Promise<PollOperation<TState, TResult>>;
    toString(): string;
}

export declare interface PollOperationState<TResult> {
    isStarted?: boolean;
    isCompleted?: boolean;
    isCancelled?: boolean;
    error?: Error;
    result?: TResult;
}

export declare type PollProgressCallback<TState> = (state: TState) => void;

export { }
