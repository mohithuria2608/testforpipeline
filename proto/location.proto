syntax = "proto3";

service LocationService {
    rpc FetchStore (IFetchStoreReq) returns (IFetchStoreRes) {}
    rpc UploadPickup (IUploadPickupReq) returns (IUploadPickupRes) {}
    rpc ValidateCoordinate (IValidateCoordinateReq) returns (IValidateCoordinateRes) {}
    rpc SyncLocationFromCMS (ISyncLocationFromCMSReq) returns (ISyncLocationFromCMSRes) {}
    rpc PostLocationDataToCMS (IKafkaReq) returns (IPostLocationDataToCMSRes) {}
    rpc SyncStoreStatus (IKafkaReq) returns (IPostLocationDataToCMSRes) {}
    rpc Sync (IKafkaReq) returns (IKafkaRes) {}
}

message IFetchStoreReq {
    required int32 storeId = 1;
    required string language = 2;
    required string serviceType = 3;
}

message IUploadPickupReq { }

message IUploadPickupRes {
    required string pickup = 1;
}

message IAerospikeConfig {
    optional bool create = 1;
    optional bool update = 2;
    optional bool reset = 3;
    optional bool get = 4;
    optional string argv = 5;
}

message IFetchStoreRes {
    required IStore store = 1;
}

message ISyncLocationFromCMSReq {
    required string set = 1;
    optional IAerospike as = 2;
    optional ICms cms = 3;
    optional ISdm sdm = 4;
    optional IMdb mdb = 5;
    optional int32 count = 6;
    optional string q = 7;
    optional string error = 8;
}

message ISyncLocationFromCMSRes {
    required bool store = 1;
}

message IPostLocationDataToCMSRes {
    required bool store = 1;
}

message IKafkaReq {
    required string set = 1;
    optional IAerospike as = 2;
    optional ICms cms = 3;
    optional ISdm sdm = 4;
    optional IMdb mdb = 5;
    optional int32 count = 6;
    optional string q = 7;
    optional string error = 8;
    required bool inQ = 9;
    optional string mainTopic = 10;
}

message IValidateCoordinateReq {
    required double lat = 1;
    required double lng = 2;
    required string serviceType = 3;
}

message IValidateCoordinateRes {
    required IStore store = 1;
}

message IStore {
    optional int32 id = 1;
    optional int32 storeId = 2;
    optional int32 sdmStoreId = 3;
    optional int32 menuId = 4;
    optional int32 webMenuId = 5;
    optional int32 countryId = 6;
    optional int32 active = 7;
    optional string name_en = 8;
    optional string name_ar = 9;
    optional string phone1 = 10;
    optional string phone2 = 11;
    optional string email = 12;
    optional IService services = 13;
    optional ILocation location = 14;
    optional string address_en = 15;
    optional string address_ar = 16;
    optional string startTime = 17;
    optional string endTime = 18;
    optional int32 nextday = 19;
    optional int32 menuTempId = 20;
    optional string description = 21;
    optional int32 areaId = 22;
    optional int32 cityId = 23;
    optional int32 provinceId = 24;
    optional int32 districtId = 25;
    optional int32 mapId = 26;
    optional int32 streetId = 27;
    optional string storeIdAs = 28;
    optional IGeoFence geoFence = 29;
    optional bool isOnline = 30;
}

message IService {
    optional int32 din = 1;
    optional int32 del = 2;
    optional int32 tak = 3;
} 

message ILocation {
    optional string description = 1;
    optional double latitude = 2;
    optional double longitude = 3;
} 

message IGeoFence { } 

message IAerospike {
    optional bool create = 1;
    optional bool update = 2;
    optional bool reset = 3;
    optional bool get = 4;
    optional bool sync = 5;
    optional string argv = 6;
}

message ICms {
    optional bool create = 1;
    optional bool update = 2;
    optional bool reset = 3;
    optional bool get = 4;
    optional bool sync = 5;
    optional string argv = 6;
}

message ISdm {
    optional bool create = 1;
    optional bool update = 2;
    optional bool reset = 3;
    optional bool get = 4;
    optional bool sync = 5;
    optional string argv = 6;
}

message IMdb {
    optional bool create = 1;
    optional bool update = 2;
    optional bool reset = 3;
    optional bool get = 4;
    optional bool sync = 5;
    optional string argv = 6;
}

message IKafkaRes {
    required string data = 1;
}