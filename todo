- how to make default menu  
- configurable items in remote config
- timezone  in country list
- timezone-offset in headers
- 


# Benchmarks
- menu json time
- cart validate time
- order place time
- order status (from payment authorization to update status of order on sdm)


# Manoj tasks
- use filesystem and read the menu 
- use aerospike to fetch menu


#sub-option id in missing in menu json
# when does namespace gets clear on aerospike

#check services with load balancer

#checkout flow will be moved on for only users who are registered on sdm

Please help us with following detail
1. Number of products currently in Aloha Menu & Kiosk Menu
2. Total number of live products
3. Different type of products in the menus
4. Can we have CSV for all products in Kiosk Menu and Aloha Menu?

5. Order status confirmation -- 
6. Driver name and number


## priority
1. activity logs
2. module integration make it same as rest (i.e, grpc and kafka structure similar)
3. mongo check in containers
4. bootstraping service 
5. cart flow with vishal
6. sms integration testing
7. validate cart cms integration
8. post order cms integration
9. mongo create history
10. fetch order status via kafka
11. validate coupon on hit of validate cart
12. aerospike call with thier team
13. 


# default language as En
# check guest user ttl with deepesh 
# expire old token after guest checkout
# check with front end if we need to change the accToken every time

# make email unique














            // const Context = Aerospike.cdt.Context
            // const context = new Context().addMapKey(headers.deviceid)
            // let op = [
            //     Aerospike.maps.putItems('session', { ...await this.buildSession(headers, sessionUpdate, false) }, {
            //         writeFlags: Aerospike.maps.writeFlags.UPDATE_ONLY | Aerospike.maps.writeFlags.NO_FAIL | Aerospike.maps.writeFlags.PARTIAL
            //     }).withContext(context)
            // ]
            // await Aerospike.operationsOnMap({ set: this.set, key: userData.id }, op)
            // delete dataToUpdate['session']



            // let userId = ENTITY.UserE.ObjectId.toString()
            // let putArg: IAerospike.Put = {
            //     bins: { id: userId, maps: { a: 1, b: 2 } },
            //     set: ENTITY.UserE.set,
            //     key: userId,
            //     create: true,
            // }
            // let a = await Aerospike.put(putArg)

            // const Context = Aerospike.cdt.Context
            // const context = new Context().addMapKey("b")
            // let op = await Aerospike.getByValue("maps", 2, Aerospike.maps.returnType.KEY_VALUE, context)
            // let a = await Aerospike.operationsOnMap({ set: ENTITY.UserE.set, key: "5e2b4d46b10b122b1bce3caf" }, [op])

            // return a

